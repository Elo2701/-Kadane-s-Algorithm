/*
 Kadane's Algorithm (Medium)
Given an array Arr[] of N integers. Find the contiguous sub-array
(containing at least one number) which has the maximum sum and return its sum.
*/
public class KadanesAlgorithm {
    public static int maxSubArraySum(int[] arr) {
        int maxSoFar = arr[0];  // Initialize with the first element
        int currentMax = arr[0];  // Also initialize with the first element

        for (int i = 1; i < arr.length; i++) {
            // Update the current maximum sum by either adding the current element
            // or starting fresh from the current element (if adding would decrease the sum)
            currentMax = Math.max(arr[i], currentMax + arr[i]);

            // Update the maximum sum so far
            maxSoFar = Math.max(maxSoFar, currentMax);
        }

        return maxSoFar;
    }

    public static void main(String[] args) {
        int[] arr1 = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println("Maximum contiguous sub-array sum is: " + maxSubArraySum(arr1));  // Output: 6

        int[] arr2 = {1, 2, 3, 4};
        System.out.println("Maximum contiguous sub-array sum is: " + maxSubArraySum(arr2));  // Output: 10

        int[] arr3 = {-1, -2, -3, -4};
        System.out.println("Maximum contiguous sub-array sum is: " + maxSubArraySum(arr3));  // Output: -1
    }
}
